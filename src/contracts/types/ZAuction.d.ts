/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZAuctionInterface extends ethers.utils.Interface {
  functions: {
    "acceptBid(bytes,uint256,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "buyNow(uint256,uint256)": FunctionFragment;
    "calculateMinterRoyalty(uint256,uint256)": FunctionFragment;
    "calculateTopLevelDomainFee(uint256,uint256)": FunctionFragment;
    "cancelBid(address,uint256)": FunctionFragment;
    "consumed(address,uint256)": FunctionFragment;
    "createBid(uint256,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "hub()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "legacyRegistrar()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceInfo(uint256)": FunctionFragment;
    "recover(bytes32,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBuyPrice(uint256,uint256)": FunctionFragment;
    "setTopLevelDomainFee(uint256,uint256)": FunctionFragment;
    "setZNSHub(address)": FunctionFragment;
    "toEthSignedMessageHash(bytes32)": FunctionFragment;
    "token()": FunctionFragment;
    "topLevelDomainFee(uint256)": FunctionFragment;
    "topLevelDomainIdCache(uint256)": FunctionFragment;
    "topLevelDomainIdOf(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMinterRoyalty",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTopLevelDomainFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "hub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyRegistrar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTopLevelDomainFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setZNSHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "toEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "topLevelDomainFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topLevelDomainIdCache",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topLevelDomainIdOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateMinterRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTopLevelDomainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "consumed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legacyRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTopLevelDomainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setZNSHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topLevelDomainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topLevelDomainIdCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topLevelDomainIdOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BidAccepted(uint256,address,address,uint256,address,uint256,uint256)": EventFragment;
    "BidCancelled(uint256,address)": EventFragment;
    "BuyNowPriceSet(uint256,uint256)": EventFragment;
    "DomainSold(address,address,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyNowPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ZAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZAuctionInterface;

  functions: {
    acceptBid(
      signature: BytesLike,
      bidNonce: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyNow(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateMinterRoyalty(
      id: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTopLevelDomainFee(
      topLevelId: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelBid(
      account: string,
      bidNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createBid(
      bidNonce: BigNumberish,
      bid: BigNumberish,
      nftAddress: string,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    hub(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      tokenAddress: string,
      registrarAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    legacyRegistrar(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { price: BigNumber; holder: string }>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyPrice(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTopLevelDomainFee(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setZNSHub(
      hubAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    topLevelDomainFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    topLevelDomainIdCache(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    topLevelDomainIdOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    signature: BytesLike,
    bidNonce: BigNumberish,
    bidder: string,
    bid: BigNumberish,
    tokenId: BigNumberish,
    minbid: BigNumberish,
    startBlock: BigNumberish,
    expireBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyNow(
    amount: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateMinterRoyalty(
    id: BigNumberish,
    bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTopLevelDomainFee(
    topLevelId: BigNumberish,
    bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelBid(
    account: string,
    bidNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  consumed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createBid(
    bidNonce: BigNumberish,
    bid: BigNumberish,
    nftAddress: string,
    tokenId: BigNumberish,
    minbid: BigNumberish,
    startBlock: BigNumberish,
    expireBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hub(overrides?: CallOverrides): Promise<string>;

  initialize(
    tokenAddress: string,
    registrarAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  legacyRegistrar(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { price: BigNumber; holder: string }>;

  recover(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyPrice(
    amount: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTopLevelDomainFee(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setZNSHub(
    hubAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toEthSignedMessageHash(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  topLevelDomainFee(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  topLevelDomainIdCache(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  topLevelDomainIdOf(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      signature: BytesLike,
      bidNonce: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyNow(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateMinterRoyalty(
      id: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTopLevelDomainFee(
      topLevelId: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelBid(
      account: string,
      bidNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createBid(
      bidNonce: BigNumberish,
      bid: BigNumberish,
      nftAddress: string,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hub(overrides?: CallOverrides): Promise<string>;

    initialize(
      tokenAddress: string,
      registrarAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    legacyRegistrar(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { price: BigNumber; holder: string }>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBuyPrice(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTopLevelDomainFee(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setZNSHub(hubAddress: string, overrides?: CallOverrides): Promise<void>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    topLevelDomainFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topLevelDomainIdCache(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topLevelDomainIdOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BidAccepted(
      bidNonce?: null,
      bidder?: string | null,
      seller?: string | null,
      amount?: null,
      nftAddress?: null,
      tokenId?: null,
      expireBlock?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, string, BigNumber, BigNumber],
      {
        bidNonce: BigNumber;
        bidder: string;
        seller: string;
        amount: BigNumber;
        nftAddress: string;
        tokenId: BigNumber;
        expireBlock: BigNumber;
      }
    >;

    BidCancelled(
      bidNonce?: null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { bidNonce: BigNumber; bidder: string }
    >;

    BuyNowPriceSet(
      tokenId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; amount: BigNumber }
    >;

    DomainSold(
      buyer?: string | null,
      seller?: string | null,
      amount?: null,
      nftAddress?: null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        buyer: string;
        seller: string;
        amount: BigNumber;
        nftAddress: string;
        tokenId: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    acceptBid(
      signature: BytesLike,
      bidNonce: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyNow(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateMinterRoyalty(
      id: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTopLevelDomainFee(
      topLevelId: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelBid(
      account: string,
      bidNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBid(
      bidNonce: BigNumberish,
      bid: BigNumberish,
      nftAddress: string,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hub(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      tokenAddress: string,
      registrarAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    legacyRegistrar(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyPrice(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTopLevelDomainFee(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setZNSHub(
      hubAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    topLevelDomainFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topLevelDomainIdCache(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topLevelDomainIdOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      signature: BytesLike,
      bidNonce: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyNow(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateMinterRoyalty(
      id: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTopLevelDomainFee(
      topLevelId: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelBid(
      account: string,
      bidNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBid(
      bidNonce: BigNumberish,
      bid: BigNumberish,
      nftAddress: string,
      tokenId: BigNumberish,
      minbid: BigNumberish,
      startBlock: BigNumberish,
      expireBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      tokenAddress: string,
      registrarAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    legacyRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyPrice(
      amount: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTopLevelDomainFee(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setZNSHub(
      hubAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    topLevelDomainFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topLevelDomainIdCache(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topLevelDomainIdOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
